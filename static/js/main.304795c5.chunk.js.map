{"version":3,"sources":["Table.js","form.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["TableHeader","react_default","a","createElement","TableBody","props","rows","tableData","map","row","index","key","name","job","onClick","removeCharacter","Table","_this$props","this","Table_TableHeader","Table_TableBody","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","submitForm","handleSubmit","state","initState","_this$state","type","onChange","App","filter","i","console","log","concat","toConsumableArray","className","src","logo","alt","href","rel","src_Table","src_form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.304795c5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>江湖</th>\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nconst TableBody = props => {\r\n    const rows = props.tableData.map((row, index) => {\r\n        return (\r\n            <tr key={index}>\r\n                <td>{row.name}</td>\r\n                <td>{row.job}</td>\r\n                <td>\r\n                    <button onClick={() => props.removeCharacter(index)}> 删除 </button>\r\n                </td>\r\n            </tr>\r\n        )\r\n    })\r\n    return (\r\n        <tbody>{rows}</tbody>\r\n    )\r\n}\r\n\r\nclass Table extends Component {\r\n    render() {\r\n        const { tableData, removeCharacter } = this.props;\r\n        return (\r\n            <table>\r\n                <TableHeader />\r\n                <TableBody tableData={tableData} removeCharacter={removeCharacter}/>\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Table;","import React, { Component  } from 'react'\r\n\r\nclass Form extends Component  {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.initState = {\r\n            name: '',\r\n            job: ''\r\n        }\r\n        this.state = this.initState\r\n    }\r\n\r\n    handleChange = event => {\r\n        const { name, value } = event.target\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    submitForm = () =>{\r\n        this.props.handleSubmit(this.state)\r\n        this.setState(this.initState)\r\n    }\r\n\r\n    render() {\r\n        const { name, job } = this.state\r\n        return (\r\n            <form>\r\n                <label>Name</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={this.handleChange} />\r\n                <label>Job</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"job\"\r\n                    value={job}\r\n                    onChange={this.handleChange} />\r\n                    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Table from './Table'\nimport Form from './form'\n\n\nclass App extends Component {\n  state = {\n    tableData: [\n      // {name:'江湖1', job:'1'},\n      // {name:'江湖2', job:'2'},\n      // {name:'江湖3', job:'3'},\n      // {name:'江湖4', job:'4'},\n      // {name:'江湖5', job:'5'},\n      // {name:'江湖6', job:'6'},\n    ]\n  }\n\n  // 删除\n  removeCharacter = index =>{\n    const {tableData} = this.state\n    this.setState({\n      tableData:tableData.filter((row, i) => {\n        return i !== index\n      })\n    })\n  }\n\n  // 更新\n  handleSubmit = tableData => {\n    console.log('触发')\n    console.log(this.state.tableData)\n    console.log(tableData)\n    this.setState({tableData:[...this.state.tableData,tableData]})\n  }\n  render() {\n    const { tableData } = this.state\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <Table tableData={tableData} removeCharacter={this.removeCharacter} />\n        <Form handleSubmit={this.handleSubmit} />\n      </div>\n    )\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//       <Table />\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}